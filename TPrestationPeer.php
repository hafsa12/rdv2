<?php



/**
 * Skeleton subclass for performing query and update operations on the 'T_PRESTATION' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.0-dev on:
 *
 * Wed Apr  3 16:50:12 2013
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.RDV
 */
class TPrestationPeer extends BaseTPrestationPeer
{
	/**
	 * Retourne les prestations
	 * @param Atexo_Prestation_CriteriaVo $criteriaVo
	 * @param integer $count
	 * @param PropelPDO $con
	 * @return array
	 */
	public function getPrestationByCriteres($criteriaVo, $count=false ,$con=null) {
		$util = new Atexo_Utils_Util();

		if($count) {
			$sql =  " SELECT COUNT(DISTINCT(PR.ID_PRESTATION)) AS NBRE_ELMNTS";
		}
		else {
			$sqlRessource = " SELECT COUNT(DISTINCT(TA.ID_AGENDA)) FROM T_AGENDA TA,T_AGENT AG, T_PERIODE TP WHERE TA.ID_PRESTATION = PR.ID_PRESTATION".
				" AND TA.ID_AGENDA=TP.ID_AGENDA AND TA.ID_AGENT=AG.ID_AGENT AND AG.ACTIF='1' " ;
			if($util->frnDate2iso($criteriaVo->getDateAu()) && $util->frnDate2iso($criteriaVo->getDateDu())) {
				$sqlRessource.= " AND DEBUT_PERIODE <= '".$util->frnDate2iso($criteriaVo->getDateAu())."'";
				$sqlRessource.= " AND FIN_PERIODE >= '".$util->frnDate2iso($criteriaVo->getDateDu())."'";
			}
			$sql =  " SELECT DISTINCT(PR.ID_PRESTATION), (".$sqlRessource.") AS NB_RESSOURCE, TPR.ID_ETABLISSEMENT,TTL3.LIBELLE AS LIBELLE_ETAB,".
				" TTL1.LIBELLE AS LIBELLE_PRESTATION, PR.RESSOURCE_OBLIGATOIRE AS RESSOURCE_OBLIGATOIRE, PR.RESSOURCE_VISIBLE AS RESSOURCE_VISIBLE, PR.PERIODICITE AS PERIODICITE,".
				" PR.DELAI_MIN AS DELAI_MIN, PR.ID_TYPE_PRESTATION AS ID_TYPE_PRESTATION, TTL2.LIBELLE AS LIBELLE_TYPE_PRESTATION,TTL4.LIBELLE AS LIBELLE_ENTITE,".
				" T_REF_PRESTATION.ID_ORGANISATION,T_REF_PRESTATION.ID_REF_PRESTATION AS ID_REF_PRESTATION,TTL5.LIBELLE AS LIBELLE_REF_PRESTATION,".
				" CONCAT(COALESCE(TTL4.LIBELLE,''), ' - ', TTL3.LIBELLE) AS LIBELLE_COMPLET_ETABLISSEMENT, PR.VISIOCONFERENCE AS VISIOCONFERENCE, ";
			if(is_numeric($criteriaVo->getIdEtablissement())) {
				$sql .=  "CONCAT(TTL2.LIBELLE, ' - ', TTL1.LIBELLE) AS LIBELLE_ETP";
			}
			else {
				$sql .=  "CONCAT(TTL3.LIBELLE, ' - ', COALESCE(TTL4.LIBELLE,''), ' : ', TTL2.LIBELLE, ' - ', TTL1.LIBELLE) AS LIBELLE_ETP";
			}
		}
		$sql .=	" FROM T_TRADUCTION_LIBELLE TTL3,".
			" T_ETABLISSEMENT ETAB ".
            " LEFT JOIN T_ENTITE TEN ON (TEN.ID_ENTITE=ETAB.ID_ENTITE) ".
            " LEFT JOIN T_TRADUCTION_LIBELLE TTL4 ON (TTL4.ID_TRADUCTION=TEN.CODE_LIBELLE AND TTL4.LANG='".$criteriaVo->getLang()."') ".
            " ,T_PRESTATION PR ".
			" LEFT JOIN T_TYPE_PRESTATION TPR  ON (TPR.ID_TYPE_PRESTATION = PR.ID_TYPE_PRESTATION) ".
			" LEFT JOIN T_REF_PRESTATION ON (T_REF_PRESTATION.ID_REF_PRESTATION=PR.ID_REF_PRESTATION) ".
			" LEFT JOIN T_TRADUCTION_LIBELLE TTL5 ON (TTL5.ID_TRADUCTION=T_REF_PRESTATION.CODE_LIBELLE ".
			" AND TTL5.LANG='".$criteriaVo->getLang()."') ";
		if($criteriaVo->getPrestationReferentiel()) {

			$sql .=	" LEFT JOIN T_TRADUCTION_LIBELLE TTL1 ON (TTL1.ID_TRADUCTION = T_REF_PRESTATION.CODE_LIBELLE  AND TTL1.LANG='".$criteriaVo->getLang()."')".
					" LEFT JOIN T_REF_TYPE_PRESTATION TRTP ON (TPR.ID_REF_TYPE_PRESTATION = TRTP.ID_REF_TYPE_PRESTATION ";

			if($criteriaVo->getIdOrganisation()) {
				$sql .= " AND TRTP.ID_ORGANISATION='".$criteriaVo->getIdOrganisation()."'";
			}
			$sql .= ") LEFT JOIN T_TRADUCTION_LIBELLE TTL2 ON ( TTL2.ID_TRADUCTION = TRTP.CODE_LIBELLE AND TTL2.LANG='".$criteriaVo->getLang()."' ) ";
		} else {
			$sql .=	" LEFT JOIN T_TRADUCTION_LIBELLE TTL1 ON (TTL1.ID_TRADUCTION = PR.CODE_LIBELLE_PRESTATION  AND TTL1.LANG='".$criteriaVo->getLang()."') ".
					" LEFT JOIN T_TRADUCTION_LIBELLE TTL2 ON ( TTL2.ID_TRADUCTION = TPR.CODE_LIBELLE_TYPE_PRESTATION AND TTL2.LANG='".$criteriaVo->getLang()."' ) ";
		}
		$sql .= " WHERE TTL3.ID_TRADUCTION=ETAB.CODE_DENOMINATION_ETABLISSEMENT ".
			" AND ETAB.ID_ETABLISSEMENT=TPR.ID_ETABLISSEMENT  ".
			" AND TTL3.LANG='".$criteriaVo->getLang()."' ";
		$sql .= self::addCritere($criteriaVo);
		if (!$count) {
			$sql.= " group by PR.ID_PRESTATION";
		}
		if (!$count && $criteriaVo->getSortByElement()) {
			$sql.= " order by ".$criteriaVo->getSortByElement()." ".$criteriaVo->getSensOrderBy();
		}
		if (!$count && $criteriaVo->getLimit()) {
			$sql .= " limit " . $criteriaVo->getOffset() . "," . $criteriaVo->getLimit();
		}
		$logger = Atexo_LoggerManager::getLogger("rdvLogInfo");
		$logger->debug($sql);
		if($con === null) {
			$con = Propel::getConnection(Atexo_Config::getParameter("DB_NAME").Atexo_Config::getParameter("CONST_READ_ONLY"));
		}
		$stmt = $con->prepare($sql);
		$stmt->setFetchMode(PDO::FETCH_ASSOC);
		$stmt->execute();
		$results = $stmt->fetchAll ();
		if($count) {
			return $results[0]["NBRE_ELMNTS"];
		}
		$logger->debug($results);
		return $results;
	}

	/**
	 * Retourne les prestations
	 * @param Atexo_Prestation_CriteriaVo $criteriaVo
	 * @return array typePrestation
	 */
	public function getPrestationParametrageByCriteres($criteriaVo, $count=false, $onlyEtab=false, $con=null) {

		if($count) {
			$sql =  " SELECT COUNT(DISTINCT(ETAB.ID_ETABLISSEMENT)) AS NBRE_ELMNTS ";
		}
		elseif($onlyEtab) {
			$sql =  " SELECT DISTINCT(ETAB.ID_ETABLISSEMENT), CONCAT(COALESCE(TTL4.LIBELLE,''), ' - ', TTL3.LIBELLE) AS LIBELLE_COMPLET_ETABLISSEMENT ";
		}
		else {
			$sql = "SELECT ETAB.ID_ETABLISSEMENT, CONCAT(COALESCE(TTL4.LIBELLE,''), ' - ', TTL3.LIBELLE) AS LIBELLE_COMPLET_ETABLISSEMENT, TP.ID_REF_TYPE_PRESTATION, count(ID_PRESTATION) AS NBRE_PRESTA ";
		}

		$sql .= "FROM T_TRADUCTION_LIBELLE TTL3, T_ETABLISSEMENT ETAB
                LEFT JOIN T_ENTITE TEN ON (TEN.ID_ENTITE=ETAB.ID_ENTITE)
                LEFT JOIN T_TRADUCTION_LIBELLE TTL4 ON (TTL4.ID_TRADUCTION=TEN.CODE_LIBELLE AND TTL4.LANG='".$criteriaVo->getLang()."')
				LEFT JOIN T_TYPE_PRESTATION TP ON (TP.ID_ETABLISSEMENT = ETAB.ID_ETABLISSEMENT)

				LEFT JOIN T_PRESTATION PR ON (PR.ID_TYPE_PRESTATION = TP.ID_TYPE_PRESTATION) ";

		if($criteriaVo->getPrestationReferentiel()) {
			$sql .=	" LEFT JOIN T_REF_TYPE_PRESTATION TRTP ON (TP.ID_REF_TYPE_PRESTATION = TRTP.ID_REF_TYPE_PRESTATION ";

			if($criteriaVo->getIdOrganisation()) {
				$sql .= " AND TRTP.ID_ORGANISATION='".$criteriaVo->getIdOrganisation()."'";
			}
			$sql .= ")";
		}

		$sql .= " WHERE TTL3.ID_TRADUCTION=ETAB.CODE_DENOMINATION_ETABLISSEMENT 

				AND TTL3.LANG='".$criteriaVo->getLang()."' ";

		$sql .= self::addCritere($criteriaVo);

		if (!$count && !$onlyEtab) {
			$sql .=" group by TP.ID_REF_TYPE_PRESTATION,ETAB.ID_ETABLISSEMENT ";
		}
		if(!$count) {
			if ($criteriaVo->getSortByElement()) {
				$sql.= " order by ".$criteriaVo->getSortByElement()." ".$criteriaVo->getSensOrderBy();
			}
			else {
				$sql .= " order by LIBELLE_COMPLET_ETABLISSEMENT ASC ";
			}
		}
		if (!$count && $criteriaVo->getLimit()) {
			$sql .= " limit " . $criteriaVo->getOffset() . "," . $criteriaVo->getLimit();
		}
		$logger = Atexo_LoggerManager::getLogger("rdvLogInfo");
		$logger->debug($sql);
		if($con === null) {
			$con = Propel::getConnection(Atexo_Config::getParameter("DB_NAME").Atexo_Config::getParameter("CONST_READ_ONLY"));
		}
		$stmt = $con->prepare($sql);
		$stmt->setFetchMode(PDO::FETCH_ASSOC);
		$stmt->execute();
		$results = $stmt->fetchAll ();
		if($count) {
			return $results[0]["NBRE_ELMNTS"];
		}

		$logger->debug($results);
		return $results;
	}
	
	/**
	 * @param Atexo_Prestation_CriteriaVo $criteriaVo
	 * Ajouter les criteres
	 */
	private function addCritere($criteriaVo) {
		$sql = "";
		if($criteriaVo->getIdEntite()) {
			$entiteGestion = new Atexo_Entite_Gestion();
			$idsEntite = $entiteGestion->getAllIdChildEntite($criteriaVo->getIdEntite());
			$sql .= " AND ETAB.ID_ENTITE in (".implode(",",$idsEntite).")";
		}
		if($criteriaVo->getMotCle()!=null) {
			$sql .= " AND (TTL1.LIBELLE like '%".addslashes($criteriaVo->getMotCle())."%'";
			$sql .= " OR TTL2.LIBELLE like '%".addslashes($criteriaVo->getMotCle())."%')";
		}
		if($criteriaVo->getIdOrganisation()) {
			$sql .= " AND ETAB.ID_ORGANISATION='".$criteriaVo->getIdOrganisation()."'";
		}
		if($criteriaVo->getIdEtablissement()) {
			$sql .= " AND ETAB.ID_ETABLISSEMENT in (".$criteriaVo->getIdEtablissement().")";
		}
		if($criteriaVo->getIdTypePrestation()) {
			$sql .= " AND PR.ID_TYPE_PRESTATION ='".$criteriaVo->getIdTypePrestation()."'";
		}
		if($criteriaVo->getIdRefPrestation()) {
			$sql .= " AND PR.ID_REF_PRESTATION ='".$criteriaVo->getIdRefPrestation()."'";
		}
		if($criteriaVo->getPrestationReferentiel() && $criteriaVo->getIdRefTypePrestation()) {
			$sql .= " AND TRTP.ID_REF_TYPE_PRESTATION='".$criteriaVo->getIdRefTypePrestation()."'";
		}
        if($criteriaVo->getEtablissementActive()!="") {
            $sql .= " AND ETAB.ACTIVE='".$criteriaVo->getEtablissementActive()."'";
        }
        if($criteriaVo->getIdTypeEtablissement() > 0) {
            $sql .= " AND ETAB.ID_TYPE_ETAB = '".$criteriaVo->getIdTypeEtablissement()."' ";
        }

		return $sql;
	}

    public static function getIdsParametragePrestationByEtablissement ( $idEtablissement, $con=null ) {
        $sql =  " SELECT PR.ID_PRESTATION, PR.ID_PARAMETRAGE_PRESTATION, TPR.ID_REF_TYPE_PRESTATION, TPR.VISIBLE_CITOYEN,ID_CHAMPS_SUPP_1,ID_CHAMPS_SUPP_2,ID_CHAMPS_SUPP_3 ".
                " FROM T_PRESTATION PR ".
                " JOIN T_TYPE_PRESTATION TPR ON (PR.ID_TYPE_PRESTATION = TPR.ID_TYPE_PRESTATION) ".
                " WHERE TPR.ID_ETABLISSEMENT = :idEtab; ";
        if($con === null) {
            $con = Propel::getConnection(Atexo_Config::getParameter("DB_NAME").Atexo_Config::getParameter("CONST_READ_ONLY"));
        }
        $params = array(':idEtab' => $idEtablissement);
        $stmt = $con->prepare($sql);
        $stmt->setFetchMode(PDO::FETCH_ASSOC);
        $stmt->execute($params);
        $results = $stmt->fetchAll ();
        $data = array();
        foreach ( $results as $element ) {
            $data['idsParametragePrestation'][$element['ID_PARAMETRAGE_PRESTATION']] = $element['ID_PARAMETRAGE_PRESTATION'];
            $data['idsRefTypePrestaVisibleCitoyen'][$element['ID_REF_TYPE_PRESTATION']] = $element['VISIBLE_CITOYEN'];
			$data['idsChampsSuppPrestation'][$element['ID_PARAMETRAGE_PRESTATION']] = array($element['ID_CHAMPS_SUPP_1'],$element['ID_CHAMPS_SUPP_2'],$element['ID_CHAMPS_SUPP_3']);
        }
        return $data;
    }
}
